syntax = "proto3";
package flyteidl.service;

option go_package = "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service";

import "google/api/annotations.proto";
// import "protoc-gen-swagger/options/annotations.proto";

import "flyteidl/core/errors.proto";
import "flyteidl/core/identifier.proto";

message EvictExecutionCacheRequest {
  // Identifier of execution to evict cache for.
  core.WorkflowExecutionIdentifier id = 1;
}

message EvictTaskExecutionCacheRequest {
  // Identifier of task execution to evict cache for.
  core.TaskExecutionIdentifier id = 1;
}

message EvictCacheResponse {
  // List of errors encountered during cache eviction (if any).
  core.CacheEvictionErrorList errors = 1;
}

// CacheService defines an RPC Service for interacting with cached data in Flyte on a high level basis.
service CacheService {
  // Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.Execution`.
  rpc EvictExecutionCache (EvictExecutionCacheRequest) returns (EvictCacheResponse) {
    option (google.api.http) = {
      delete: "/api/v1/cache/executions/{id.project}/{id.domain}/{id.name}"
      body: "*"
    };
    // option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
    //   description: "Evicts all cached data for the referenced (workflow) execution."
    // };
  }

  // Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.TaskExecution`.
  rpc EvictTaskExecutionCache (EvictTaskExecutionCacheRequest) returns (EvictCacheResponse) {
    option (google.api.http) = {
      delete: "/api/v1/cache/task_executions/{id.node_execution_id.execution_id.project}/{id.node_execution_id.execution_id.domain}/{id.node_execution_id.execution_id.name}/{id.node_execution_id.node_id}/{id.task_id.project}/{id.task_id.domain}/{id.task_id.name}/{id.task_id.version}/{id.retry_attempt}"
      body: "*"
    };
    // option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
    //   description: "Evicts all cached data for the referenced task execution."
    // };
  }
}
