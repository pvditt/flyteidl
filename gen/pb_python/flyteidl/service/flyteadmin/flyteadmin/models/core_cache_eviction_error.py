# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.cache_eviction_error_code import CacheEvictionErrorCode  # noqa: F401,E501
from flyteadmin.models.core_node_execution_identifier import CoreNodeExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.core_task_execution_identifier import CoreTaskExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier  # noqa: F401,E501


class CoreCacheEvictionError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'CacheEvictionErrorCode',
        'message': 'str',
        'node_execution_id': 'CoreNodeExecutionIdentifier',
        'task_execution_id': 'CoreTaskExecutionIdentifier',
        'workflow_execution_id': 'CoreWorkflowExecutionIdentifier'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'node_execution_id': 'node_execution_id',
        'task_execution_id': 'task_execution_id',
        'workflow_execution_id': 'workflow_execution_id'
    }

    def __init__(self, code=None, message=None, node_execution_id=None, task_execution_id=None, workflow_execution_id=None):  # noqa: E501
        """CoreCacheEvictionError - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._message = None
        self._node_execution_id = None
        self._task_execution_id = None
        self._workflow_execution_id = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if message is not None:
            self.message = message
        if node_execution_id is not None:
            self.node_execution_id = node_execution_id
        if task_execution_id is not None:
            self.task_execution_id = task_execution_id
        if workflow_execution_id is not None:
            self.workflow_execution_id = workflow_execution_id

    @property
    def code(self):
        """Gets the code of this CoreCacheEvictionError.  # noqa: E501

        Error code to match type of cache eviction error encountered.  # noqa: E501

        :return: The code of this CoreCacheEvictionError.  # noqa: E501
        :rtype: CacheEvictionErrorCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CoreCacheEvictionError.

        Error code to match type of cache eviction error encountered.  # noqa: E501

        :param code: The code of this CoreCacheEvictionError.  # noqa: E501
        :type: CacheEvictionErrorCode
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this CoreCacheEvictionError.  # noqa: E501

        More detailed error message explaining the reason for the cache eviction failure.  # noqa: E501

        :return: The message of this CoreCacheEvictionError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CoreCacheEvictionError.

        More detailed error message explaining the reason for the cache eviction failure.  # noqa: E501

        :param message: The message of this CoreCacheEvictionError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def node_execution_id(self):
        """Gets the node_execution_id of this CoreCacheEvictionError.  # noqa: E501

        ID of the node execution the cache eviction failed for.  # noqa: E501

        :return: The node_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :rtype: CoreNodeExecutionIdentifier
        """
        return self._node_execution_id

    @node_execution_id.setter
    def node_execution_id(self, node_execution_id):
        """Sets the node_execution_id of this CoreCacheEvictionError.

        ID of the node execution the cache eviction failed for.  # noqa: E501

        :param node_execution_id: The node_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :type: CoreNodeExecutionIdentifier
        """

        self._node_execution_id = node_execution_id

    @property
    def task_execution_id(self):
        """Gets the task_execution_id of this CoreCacheEvictionError.  # noqa: E501

        ID of the task execution the cache eviction failed for (if the node execution was part of a task execution).  # noqa: E501

        :return: The task_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :rtype: CoreTaskExecutionIdentifier
        """
        return self._task_execution_id

    @task_execution_id.setter
    def task_execution_id(self, task_execution_id):
        """Sets the task_execution_id of this CoreCacheEvictionError.

        ID of the task execution the cache eviction failed for (if the node execution was part of a task execution).  # noqa: E501

        :param task_execution_id: The task_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :type: CoreTaskExecutionIdentifier
        """

        self._task_execution_id = task_execution_id

    @property
    def workflow_execution_id(self):
        """Gets the workflow_execution_id of this CoreCacheEvictionError.  # noqa: E501

        ID of the workflow execution the cache eviction failed for (if the node execution was part of a workflow execution).  # noqa: E501

        :return: The workflow_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :rtype: CoreWorkflowExecutionIdentifier
        """
        return self._workflow_execution_id

    @workflow_execution_id.setter
    def workflow_execution_id(self, workflow_execution_id):
        """Sets the workflow_execution_id of this CoreCacheEvictionError.

        ID of the workflow execution the cache eviction failed for (if the node execution was part of a workflow execution).  # noqa: E501

        :param workflow_execution_id: The workflow_execution_id of this CoreCacheEvictionError.  # noqa: E501
        :type: CoreWorkflowExecutionIdentifier
        """

        self._workflow_execution_id = workflow_execution_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreCacheEvictionError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreCacheEvictionError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
